/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package cheetah_inekf_lcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class contact_t implements lcm.lcm.LCMEncodable
{
    public byte num_legs;
    public double timestamp;
    public byte contact[];
 
    public contact_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x12e312df2f1d46f6L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(cheetah_inekf_lcm.contact_t.class))
            return 0L;
 
        classes.add(cheetah_inekf_lcm.contact_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.num_legs); 
 
        outs.writeDouble(this.timestamp); 
 
        if (this.num_legs > 0)
            outs.write(this.contact, 0, num_legs);
 
    }
 
    public contact_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public contact_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static cheetah_inekf_lcm.contact_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        cheetah_inekf_lcm.contact_t o = new cheetah_inekf_lcm.contact_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.num_legs = ins.readByte();
 
        this.timestamp = ins.readDouble();
 
        this.contact = new byte[(int) num_legs];
        ins.readFully(this.contact, 0, num_legs); 
    }
 
    public cheetah_inekf_lcm.contact_t copy()
    {
        cheetah_inekf_lcm.contact_t outobj = new cheetah_inekf_lcm.contact_t();
        outobj.num_legs = this.num_legs;
 
        outobj.timestamp = this.timestamp;
 
        outobj.contact = new byte[(int) num_legs];
        if (this.num_legs > 0)
            System.arraycopy(this.contact, 0, outobj.contact, 0, this.num_legs); 
        return outobj;
    }
 
}

