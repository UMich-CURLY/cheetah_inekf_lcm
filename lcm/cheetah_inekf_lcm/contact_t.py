"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class contact_t(object):
    __slots__ = ["num_legs", "timestamp", "contact"]

    __typenames__ = ["int8_t", "double", "int8_t"]

    __dimensions__ = [None, None, ["num_legs"]]

    def __init__(self):
        self.num_legs = 0
        self.timestamp = 0.0
        self.contact = []

    def encode(self):
        buf = BytesIO()
        buf.write(contact_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bd", self.num_legs, self.timestamp))
        buf.write(struct.pack('>%db' % self.num_legs, *self.contact[:self.num_legs]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != contact_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return contact_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = contact_t()
        self.num_legs, self.timestamp = struct.unpack(">bd", buf.read(9))
        self.contact = struct.unpack('>%db' % self.num_legs, buf.read(self.num_legs))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if contact_t in parents: return 0
        tmphash = (0x12e312df2f1d46f6) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if contact_t._packed_fingerprint is None:
            contact_t._packed_fingerprint = struct.pack(">Q", contact_t._get_hash_recursive([]))
        return contact_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

